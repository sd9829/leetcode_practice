class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def buildTree(self, preorder, inorder):
        if not preorder or not inorder:
            return None
        
        root = TreeNode(preorder[0])
        mid = inorder.index(preorder[0])
        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])
        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])
        return root 

def print_preorder(node):
    if node is None:
        return
    print(node.val, end=" ")
    print_preorder(node.left)
    print_preorder(node.right)

def print_inorder(node):
    if node is None:
        return
    print_inorder(node.left)
    print(node.val, end=" ")
    print_inorder(node.right)

if __name__ == "__main__":
    solution = Solution()
    preorder = [9, 3, 15, 20, 7]
    inorder = [9, 3, 15, 20, 7]
    root = solution.buildTree(preorder, inorder)
    
    print("Preorder Traversal:")
    print_preorder(root)
    
    print("\nInorder Traversal:")
    print_inorder(root)
    print("\n Solution of buildTree:")
    print(root)
